> # Load libraries
> library(R330)
> library(ISLR)
> 
> # make linear regression base
> head(Smarket)
  Year   Lag1   Lag2   Lag3   Lag4   Lag5 Volume  Today Direction
1 2001  0.381 -0.192 -2.624 -1.055  5.010 1.1913  0.959        Up
2 2001  0.959  0.381 -0.192 -2.624 -1.055 1.2965  1.032        Up
3 2001  1.032  0.959  0.381 -0.192 -2.624 1.4112 -0.623      Down
4 2001 -0.623  1.032  0.959  0.381 -0.192 1.2760  0.614        Up
5 2001  0.614 -0.623  1.032  0.959  0.381 1.2057  0.213        Up
6 2001  0.213  0.614 -0.623  1.032  0.959 1.3491  1.392        Up
> use = sample(1250, 1000)
> sp500.df = Smarket[use,]
> rownames(sp500.df) = 1:1000
> 
> sp500 = lm(Today ~ . - Direction, data = sp500.df)
> 
> # do simple prediction and caculate the test error
> newSp500.df = Smarket[-use,]
> rownames(newSp500.df) = 1:250
> predictions = predict(sp500, newdata = newSp500.df)
> head(predictions)
           1            2            3            4            5            6 
-0.047589827  0.002310612  0.025110938  0.074938993  0.066311411  0.164542595 
> actuals = newSp500.df$Today
> mean((predictions - actuals)^2)
[1] 1.222881
> use = sample(1250, 1000)
> sp500.df = Smarket[use,]
> rownames(sp500.df) = 1:1000
> 
> sp500 = lm(Today ~ . - Direction, data = sp500.df)
> 
> # do simple prediction and caculate the test error
> newSp500.df = Smarket[-use,]
> rownames(newSp500.df) = 1:250
> predictions = predict(sp500, newdata = newSp500.df)
> head(predictions)
          1           2           3           4           5           6 
 0.04443418 -0.12349216 -0.16534753 -0.10549858 -0.16790521 -0.06356785 
> actuals = newSp500.df$Today
> mean((predictions - actuals)^2)
[1] 1.435958
> use = sample(1250, 1000)
> sp500.df = Smarket[use,]
> rownames(sp500.df) = 1:1000
> 
> sp500 = lm(Today ~ . - Direction, data = sp500.df)
> 
> # do simple prediction and caculate the test error
> newSp500.df = Smarket[-use,]
> rownames(newSp500.df) = 1:250
> predictions = predict(sp500, newdata = newSp500.df)
> head(predictions)
           1            2            3            4            5            6 
-0.177608499 -0.142225200 -0.122642135 -0.027149605 -0.000663863 -0.042887573 
> actuals = newSp500.df$Today
> mean((predictions - actuals)^2)
[1] 1.301331
> use = sample(1250, 1000)
> sp500.df = Smarket[use,]
> rownames(sp500.df) = 1:1000
> 
> sp500 = lm(Today ~ . - Direction, data = sp500.df)
> 
> # do simple prediction and caculate the test error
> newSp500.df = Smarket[-use,]
> rownames(newSp500.df) = 1:250
> predictions = predict(sp500, newdata = newSp500.df)
> head(predictions)
          1           2           3           4           5           6 
-0.02379533 -0.14277577 -0.12787671 -0.06950854 -0.13499035  0.02463854 
> actuals = newSp500.df$Today
> mean((predictions - actuals)^2
+ )
[1] 1.30924
> use = sample(1250, 1000)
> sp500.df = Smarket[use,]
> rownames(sp500.df) = 1:1000
> 
> sp500 = lm(Today ~ . - Direction, data = sp500.df)
> 
> # do simple prediction and caculate the test error
> newSp500.df = Smarket[-use,]
> rownames(newSp500.df) = 1:250
> predictions = predict(sp500, newdata = newSp500.df)
> head(predictions)
          1           2           3           4           5           6 
-0.11226036 -0.09625232 -0.13489627 -0.06172030  0.01018044  0.03847381 
> actuals = newSp500.df$Today
> mean((predictions - actuals)^2)
[1] 1.140007
> 1.140007^2
[1] 1.299616
> # Use cross.val from R330 package to do predict error estimation
> cross.val(sp500, nfold = 10, nrep = 20)
Cross-validated estimate of root 
mean square prediction error =  1.166707 
> cross.val(sp500, nfold = 10, nrep = 50)
Cross-validated estimate of root 
mean square prediction error =  1.168058 
> cross.val(sp500, nfold = 10, nrep = 100)
Cross-validated estimate of root 
mean square prediction error =  1.167728 
> cross.val(sp500, nfold = 5, nrep = 20)
Cross-validated estimate of root 
mean square prediction error =  1.169518 
> cross.val(sp500, nfold = 10, nrep = 50)
Cross-validated estimate of root 
mean square prediction error =  1.167774 
> cross.val(sp500, nfold = 10, nrep = 100)
Cross-validated estimate of root 
mean square prediction error =  1.167529 
> mean(residuals(sp500)^2)
[1] 1.324173
> ####################################################################
> cross.val.mod <- function (f, nfold = 10, nrep = 20, ...){
+     X <- model.matrix(f$terms, model.frame(f))
+     y = fitted.values(f) + residuals(f)
+     n <- dim(X)[1]
+     CV <- numeric(nrep)
+     pred.error <- numeric(nfold)
+     m <- n%/%nfold
+     for (k in 1:nrep) {
+         rand.order <- order(runif(n))
+         yr <- y[rand.order]
+         Xr <- X[rand.order, ]
+         sample <- 1:m
+         for (i in 1:nfold) {
+               use.mat <- as.matrix(Xr[-sample,])
+               test.mat <- as.matrix(Xr[sample,])
+               y.use = yr[-sample]
+               new.data <- data.frame(test.mat)
+               fit <- lm(y.use ~ -1+use.mat)
+               my.predict = test.mat%*%coefficients(fit) 
+               pred.error[i] <- sum((yr[sample] - my.predict)^2)/m
+               sample <- if(i==nfold) (max(sample)+1):n else sample + m
+ 
+             }
+             CV[k] <- mean(pred.error)
+         }
+ mean(CV)
+ }
> ############################################# 
> # Use many times of average of CV
> cvvec = numeric(20)
> for (i in 1:20) {
+ cvvec[i] = cross.val.mod(sp500, nfold = 10, nrep = 1)
+ }
> mean(cvvec)
[1] 1.362551
> sd(cvvec)
[1] 0.006930549
> 
> # Use bootstrap method to estimate PE
> err.boot(sp500, B = 50)
$err
[1] 1.324173

$Err
[1] 1.366431

> # Use boostrap package
> library(bootstrap)
> theta.fit = function(x, y) {
+ lsfit(x, y)
+ }
> theta.predict = function(fit, x) {
+ cbind(1, x)%*%fit$coef
+ }
> sq.err = function(y, yhat) {
+ (y - yhat)^2
+ }
> 
> # CV10 estimation
> y = sp500.df[,1]
> x = sp500.df[,-1]
> cv10Errs = crossval(x, y, theta.fit, theta.predict, ngroup = 10)
Error in min(K, max(groupsize)) : invalid 'type' (closure) of argument
> cv10 = mean((y - cv10Errs$cv.fit)^2)
Error in mean((y - cv10Errs$cv.fit)^2) : object 'cv10Errs' not found
> cv10
Error: object 'cv10' not found
> 
> boot = bootpred(x, y, nboot = 200, theta.fit, theta.predict,
+ err.meas = sq.err)
Error in lsfit(x, y) : NA/NaN/Inf in 'x'
In addition: Warning message:
In lsfit(x, y) : NAs introduced by coercion
> # Use caret package
> library(caret)
> 
> # CV10 estimation with caret
> CV10 = train(Today ~ + Year + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume - Direction, 
+ data = sp500.df, 
+ method = "lm",
+ trControl = trainControl(method = "cv", number = 10, repeats = 20))
> CV10
Linear Regression 

1000 samples
   8 predictor

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 900, 900, 900, 899, 900, 900, ... 
Resampling results:

  RMSE      Rsquared  
  1.166693  0.04094703

Tuning parameter 'intercept' was held constant at a value of TRUE
> 
> # bootstrap estimate
> boot = train(Today~ . - Direction, 
+ data = sp500.df,
+ method = "lm", 
+ trControl = trainControl(method = "boot", repeats = 200))
> boot
Linear Regression 

1000 samples
   8 predictor

No pre-processing
Resampling: Bootstrapped (25 reps) 
Summary of sample sizes: 1000, 1000, 1000, 1000, 1000, 1000, ... 
Resampling results:

  RMSE      Rsquared   
  1.184074  0.007264939

Tuning parameter 'intercept' was held constant at a value of TRUE
> # forward selection
> null.model = lm(Today~1, data = sp500.df)
> selected = step(null.model, 
+ scope = formula(sp500), 
+ direction = "forward",
+ trace = 0)
> selected

Call:
lm(formula = Today ~ 1, data = sp500.df)

Coefficients:
(Intercept)  
  -0.002521  

> 
> # backward elimination
> selected = step(sp500, 
+ scope = formula(sp500),
+ direction = "backward", 
+ trace = 0)
> selected

Call:
lm(formula = Today ~ 1, data = sp500.df)

Coefficients:
(Intercept)  
  -0.002521  

> 
> # stepwise
> selected = step(sp500, 
+ scope = formula(sp500),
+ direction = "both", trace = 0)
> selected

Call:
lm(formula = Today ~ 1, data = sp500.df)

Coefficients:
(Intercept)  
  -0.002521  

> # forward selection
> null.model = lm(Today~1, data = sp500.df)
> selected = step(null.model, 
+ scope = formula(sp500), 
+ direction = "forward",
+ trace = 0)
> selected

Call:
lm(formula = Today ~ 1, data = sp500.df)

Coefficients:
(Intercept)  
  -0.002521  

> 
> # backward elimination
> selected = step(sp500, 
+ scope = formula(sp500),
+ direction = "backward", 
+ trace = 0)
> selected

Call:
lm(formula = Today ~ 1, data = sp500.df)

Coefficients:
(Intercept)  
  -0.002521  

> 
> # stepwise
> selected = step(sp500, 
+ scope = formula(sp500),
+ direction = "both", trace = 0)
> selected

Call:
lm(formula = Today ~ 1, data = sp500.df)

Coefficients:
(Intercept)  
  -0.002521  

> # all possible regressions
> allpossregs(sp500)
      rssp sigma2 adjRsq     Cp      AIC      BIC      CV Year Lag1 Lag2 Lag3
1 1328.144  1.331  0.000 -1.026  998.974 1008.790 133.371    1    0    0    0
2 1326.768  1.331  0.000 -0.056  999.944 1014.667 133.811    1    0    0    0
3 1325.727  1.331  0.000  1.164 1001.164 1020.795 134.214    1    0    0    0
4 1324.734  1.331  0.000  2.420 1002.420 1026.958 134.729    1    0    1    0
5 1324.342  1.332 -0.001  4.126 1004.126 1033.573 135.156    1    1    1    0
6 1324.234  1.334 -0.002  6.045 1006.045 1040.399 135.857    1    1    1    1
7 1324.173  1.335 -0.003  8.000 1008.000 1047.262 136.280    1    1    1    1
  Lag4 Lag5 Volume
1    0    0      0
2    0    1      0
3    1    1      0
4    1    1      0
5    1    1      0
6    1    1      0
7    1    1      1
> 
